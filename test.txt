Question 41 - How do you perform integration testing with @SpringBootTest for a web application?
Integration Test checking the interactions between few components of the system 
to check if those components are delivering expected functionalities when working together.
Must test  on smallest possible amount of components that are enough to test specific functionality and  
meaningful.
Components that are not meaningful can be omitted, or mocked with usage of @MockBean annotation.
When Web components  (Controller Tests, Rest Controller Tests),are tested in Integration way, should be written in a way  to make a HTTP Request and check HTTP Response.
The  results are meaningful test, which delivers feedback that actually checks if component works correctly.


Spring Boot allows you to write Integration Tests for Web Components in two ways:
 
MockMvc
Embedded Container


Question 42 - When do you want to use @WebMvcTest? What does it auto-configure?

Use @WebMvcTest annotation to write Integration Test that  focuses on web layer of the application.

@WebMvcTest approach will create ApplicationContext that contains only web components and omits any other components that are not part of web layer.

Other components, if required for the test, can be mocked with usage of @MockBean annotation or delivered by @Configuration annotated class imported with usage of @Import annotation.

@WebMvcTest supports two cases:
Single Controller Auto-Configuration – annotate test by providing Controller class -
@WebMvcTest(CityController.class)
Multiple (All found) Controllers Auto-Configuration – just annotate test with 
@WebMvcTest




Question 43 - What are the differences between @MockBean and @Mock?

@Mock annotation is from Mockito Framework which allows  easy Mock creation.
This annotation is used by MockitoJUnitRunner, each field annotated with it will have Mock for specified class created.

This annotation does not inject mocks into tested class on itself, to use injection you need to have target class annotated with @InjectMocks annotation.

@MockBean annotation is from spring-boot-test, it creates Mockito Mock and  injects it into Application Context created by @SpringBootTest.

All beans which refers to mocked class via @Autowired will get this mock injected instead of real class.

Main difference between @MockBean and @Mock annotation is that @MockBean creates mock and injects it into Application Context,
while @Mock annotation only creates it but to inject it, we need to do  manually or with @InjectMocks annotation,Injection is being done to the class not whole Application Context.
